The whole generic thing that i'm kinda stumbling upon.

This whole thing started from the List of a single type requirement for representing "list of" references in ModelObjects.
Basically I don't want to use regular arrays because they allow any kind of value to be added in them. 
So I started working on GenericList, which was supposed to be a sort of equivalent to C#'s List<T>/Java's ArrayList<T>.
But the problem still wasn't solved by the GenericList class, which is capable of holding a single basic type or class, but isn't suited to keeping a parameterized class like the ModelObject class (which has the type of it's model as a parameter to distinguish between two types of ModelObject).
What I need for my "list of" references is a way of to have a GenericList("ModelObject<ModelType>"); which should be relatively easy to acomplish, but that then raises the issue of generality (why not have a general solution for providing generic-type behaviour to PHP classes.

Really the thing that I care most about in this whole generics thing is to be able to distinguish between the classes that contain a parameterized type (a class with the same name but with an integer parameter isn't the same as one with a string parameter - if that makes sense).

So I guess that ParameterTypes() function that returns an array containing the class's generic(internal) parameters is what I need.

Ok so that's that I suppose, the whole point of this Generic interface is to be able to differentiate between two classes with the same name but with different parameterized types. This is needed specifically for classes like the GenericList, but hey the GenericList itself implements the Generic interface so I guess this sort of behaviour should be beneficial for any class that uses parameterized classes.